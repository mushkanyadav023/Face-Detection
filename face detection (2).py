# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I0urQpwVnmVKCfYx088VdnzlSGR66GsN
"""

!pip install flask-ngrok
!pip install opencv-python-headless

!mkdir face_detector

# Download deploy.prototxt
!wget -O face_detector/deploy.prototxt https://raw.githubusercontent.com/opencv/opencv/master/samples/dnn/face_detector/deploy.prototxt

# Download res10_300x300_ssd_iter_140000.caffemodel
!wget -O face_detector/res10_300x300_ssd_iter_140000.caffemodel https://github.com/opencv/opencv_3rdparty/raw/dnn_samples_face_detector_20170830/res10_300x300_ssd_iter_140000.caffemodel

import cv2
import numpy as np
from flask import Flask, Response
from flask_ngrok import run_with_ngrok

# Load the face detector model
prototxt_path = "face_detector/deploy.prototxt"
model_path = "face_detector/res10_300x300_ssd_iter_140000.caffemodel"
net = cv2.dnn.readNetFromCaffe(prototxt_path, model_path)

# Start Flask app
app = Flask(__name__)
run_with_ngrok(app)

def detect_faces():
    cap = cv2.VideoCapture(0)  # Access local webcam
    while True:
        ret, frame = cap.read()
        if not ret:
            break

        h, w = frame.shape[:2]
        blob = cv2.dnn.blobFromImage(cv2.resize(frame, (300, 300)), 1.0,
                                     (300, 300), (104.0, 177.0, 123.0))

        net.setInput(blob)
        detections = net.forward()

        for i in range(detections.shape[2]):
            confidence = detections[0, 0, i, 2]
            if confidence > 0.5:
                box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
                (startX, startY, endX, endY) = box.astype("int")
                cv2.rectangle(frame, (startX, startY), (endX, endY), (0, 255, 0), 2)

        ret, jpeg = cv2.imencode('.jpg', frame)
        frame = jpeg.tobytes()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n\r\n')

@app.route('/')
def video_feed():
    return Response(detect_faces(),
                    mimetype='multipart/x-mixed-replace; boundary=frame')

app.run()

